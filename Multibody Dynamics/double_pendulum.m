clear all
% unconstrained double pendulum 
syms x2(t) y2(t) theta2(t) x3(t) y3(t) theta3(t)
syms x_2 y_2 theta_2 x_3 y_3 theta_3 
syms x2ddot y2ddot theta2ddot x3ddot y3ddot theta3ddot
syms m2 m3 J2 J3 k c l2 l3 l0 g

rA_2 = [l2/2; 0] ; rB_3 = [-l3/2; 0] ; rC_2 = [-l2/2; 0] ; 
rA = loc2global(theta2(t))*rA_2+[x2(t); y2(t)]; 
rC = loc2global(theta2(t))*rC_2+[x2(t); y2(t)];
rB = loc2global(theta3(t))*rB_3+[x3(t); y3(t)] ;

% ======= Spring Force Calculation ======
% deformed length of the spring 
l = sqrt(transpose(rA-rB)*(rA-rB)) ; 
% magnitude of the spring force 
fs_mag = k*(l-l0); 
% direction of the force
dBA = rB-rA ; 
u = dBA/norm(dBA) ; 
fs_A = fs_mag*u ; 
fs_B = -fs_mag*u ; 
% Moment generated by the spring force at A 
% position vector of A w.r.t to CM of body 2
d_A_CM2 = rA - [x2(t); y2(t)] ; 
Ms_2 = transpose(tildeop(d_A_CM2))*fs_A ; 
% position vector of B w.r.t CM of body 3 
d_B_CM3 = rB-[x3(t); y3(t)] ; 
Ms_3 = transpose(tildeop(d_B_CM3))*fs_B ; 
% =======================================

% ===== Damping Force Calculation ======
ldamper = sqrt(transpose(rC)*rC) ;
rCdot = diff(rC, t) ; 
ldot_damper = (transpose(rC)*rCdot)/ldamper ;
% magnitude of the damping force 
fd_mag = c*ldot_damper; 
% direction of the damping force
udamper = -rC/norm(rC) ; 
fd_C = fd_mag*udamper ; 
% Moment due to damping force 
% position vector of C w.r.t CM of body2 
d_C_CM2 = rC-[x2(t); y2(t)] ; 
Md_2 = transpose(tildeop(d_C_CM2))*fd_C ; 



M = diag([m2; m2; J2; m3; m3; J3]) ; 
% q = [diff(x2(t),2); diff(y2(t),2); diff(theta2(t),2); ...
%     diff(x3(t),2); diff(y3(t),2); diff(theta3(t),2) ]; 
q = [x2ddot; y2ddot; theta2ddot; x3ddot; y3ddot; theta3ddot];
     
  fa = [0; -m2*g; 0; 0; -m3*g; 0] ; 
  fs = [fs_A; Ms_2; fs_B; Ms_3] ; 
  fd = [fd_C; Md_2; 0; 0; 0] ; 
     
f = fa+fs+fd ; 
old = [x2(t), y2(t), theta2(t), x3(t), y3(t), theta3(t)] ; 
new = [x_2, y_2, theta_2, x_3, y_3, theta_3] ; 
qdotdot = subs(inv(M)*f, old, new)  ;  
save('formulation', 'qdotdot'); 